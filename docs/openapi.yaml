openapi: 3.0.0
info:
  title: WantAPrice API
  version: '1.0'
  description: REST API documentation of endpoints
servers:
  - url: 'https://api.wantaprice.com/v1/'
    variables: {}
tags:
  - name: Users
  - name: Sessions
paths:
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      description: ''
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                displayName:
                  type: string
                phone:
                  type: string
              required:
                - login
                - password
                - displayName
            examples:
              CreateUserWithPassword:
                description: Create a user with password
                value:
                  login: "alice@example.com"
                  password: "alicepw"
                  displayName: "Alice Foo"
                  phone: "1112223333"
      responses:
        '201':
          description: Created User
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: string
                    example: "38fd4d9d-cfc5-11ea-b07c-f6bb43e5ef99"
                    description: User ID
  '/users/{userId}':
    parameters:
      - in: path
        description: ID of interested user
        name: userId
        schema:
          type: string
        required: true
    get:
      security:
       - cookieAuth: []
      summary: Get user by ID
      tags:
        - Users
      operationId: getUserById
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /sessions:
    post:
      tags:
        - Sessions
      summary: Primary authenication
      description: ""
      operationId: primaryAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required: 
                - login
                - password
            examples: 
              AuthWithPassword:
                value:
                  login: "alice@example.com"
                  password: "alicepw"
      responses:
        "200":
          description: Sucessful authentication
          headers:
            Set-Cookie:
              schema:
                type: string
              description: Session cookie 
        "401":
          description: Unauthorized
  '/sessions/me':
    delete:
      security:
       - cookieAuth: []
      tags:
        - Sessions
      summary: Delete current session (logout)
      description: "Closes a user's session (logout)."
      operationId: closeSession
      responses:
        "204":
          description: Session closed
        "404":
          description: Session not found   
  '/sessions/me/lifecycle/refresh':
    post:
      security:
       - cookieAuth: []
      tags:
        - Sessions
      summary: Refresh your existing session
      description: "The response will contain the refreshed Session with an updated expiresAt timestamp for the user if the id was valid."
      operationId: refreshSession
      responses:
        "200":
          description: Sucessful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        "404":
          description: Session not found   
components:
  schemas:
    Alert:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        price:
          $ref: '#/components/schemas/Price'
    Product:
      type: object
      properties:
        id:
          type: string
          example: "5057271217946"
        name: 
          type: string
          example: "A1 Original Sauce 142g"
        category:
          type: string
          example: "Food Items"
        manufacturer:
          type: string
          example: "A1"
        image:
          type: string
          format: uri
          example: "https://images.barcodelookup.com/13237/132372316-1.jpg"
    Offer:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        price: 
          $ref: '#/components/schemas/Price'
        merchant:
          $ref: '#/components/schemas/Merchant'
    Merchant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Price:
      type: object
      properties:
        value: 
          type: string
        currency:
          type: string
    User:
      type: object
      externalDocs:
        description: Status flow diagram
        url: "https://developer.okta.com/img/okta-user-status.png"
      properties:
        id:
          type: string
          description: unique key for user
          example: "00ub0oNGTSWTBKOLGLNR"
        login:
          title: Username
          type: string
          minLength: 5
          maxLength: 100
          example: alice@example.com
          format: email
        displayName:
          type: string
          example: Alice Foo
        phone:
          type: string
          example: "1112223333"
        created:
          type: string
          description: timestamp when user was created
          format: date-time
        lastLogin:
          type: string
          format: date-time
        passwordChanged:
          type: string
          format: date-time
    Session:
      type: object
      properties:
        id:
          type: string
          description: unique key for the session
          example: "101W_juydrDRByB7fUdRyE2JQ"
        login:
          type: string
          format: email
          example: alice@example.com
        userId:
          type: string
          description: unique key for the user
        expiresAt:
          type: string
          format: date-time
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      required:
        - code
        - message
  responses:
    Succeeded:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
    Created:
      description: Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
      headers:
        Location:
          schema:
            type: string
            format: uri
          description: Location of created resource
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: _sak
